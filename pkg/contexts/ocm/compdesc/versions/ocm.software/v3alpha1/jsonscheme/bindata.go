// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xef\x6f\xdb\xb8\xf5\xbb\xff\x8a\x87\x4b\x01\x39\x4d\x64\x37\x29\x3a\xe0\xfc\x25\xc8\x7a\x18\x50\x6c\x77\x39\xb4\xdd\x3e\x2c\xcd\x0a\x5a\x7a\xb2\xd9\xa3\x48\x8f\xa4\x9c\xb8\xbd\xfe\xef\x03\x49\x51\xa2\x64\xc9\x3f\x93\x6e\xc3\x35\x5f\x62\x52\xef\x37\xdf\x2f\x3e\xe9\x19\x4d\x27\x10\xcd\xb5\x5e\xa8\xc9\x78\x3c\x23\x32\x45\x8e\x72\x94\x30\x51\xa4\x63\x95\xcc\x31\x27\x6a\x9c\x88\x7c\x21\x38\x72\x1d\xa7\xa8\x12\x49\x17\x5a\xc8\x58\x24\x79\xbc\x7c\x49\xd8\x62\x4e\x2e\xa2\xc1\x33\x07\x1b\xd0\xfa\xa4\x04\x8f\xdd\xee\x48\xc8\xd9\x38\x95\x24\xd3\xe3\xcb\x17\x97\x2f\xe2\x8b\xcb\x92\x74\x34\xf0\x04\xa9\xe0\x13\x88\x6e\x5e\xff\x0c\xaf\x3d\x33\xf8\xa9\x62\x06\xcb\x97\x50\x63\x64\x94\x53\x83\xa0\x26\x03\x80\x1c\x35\x31\xff\x01\xf4\x6a\x81\x13\x88\xc4\xf4\x13\x26\x3a\xb2\x5b\x4d\xea\x95\x1a\xb0\x44\xa9\xa8\xe0\x16\x39\x25\x9a\x38\x68\x89\xff\x2e\xa8\xc4\xd4\x91\x03\x88\x21\xe2\x24\xc7\xa8\x5e\x96\x78\x6e\x87\xa4\xa9\x15\x83\xb0\x5f\xa5\x58\xa0\xd4\x14\xd5\x04\x32\xc2\x14\xda\xe7\x8b\x7a\xb7\xa4\x60\xa8\xf9\xdf\x00\xcf\x24\x66\x13\x88\x4e\xc6\x81\x46\xb5\xa9\x7f\x09\x38\x97\x6c\xb7\xa0\x4a\x64\xe4\x01\xd3\x77\x98\x2f\x51\x7a\x54\x46\xa6\xc8\xd4\x16\x4c\x07\xe4\x51\x16\x52\x2c\x69\x8a\x72\x0b\x92\x07\xf3\x68\x89\x44\x62\x9e\xbc\xa7\xa1\x92\xee\x50\x6e\x23\xa5\x25\xe5\xb3\xe8\x1c\x22\x5e\x30\x16\xdd\x55\x00\x99\x90\x39\xd1\x13\x48\x89\xc6\x58\xd3\x1c\x07\x83\xa6\xd4\xe5\xb1\x12\x29\xc9\xca\xf1\xa2\x1a\xf3\x4a\xa5\x7e\x85\x22\x4f\xa8\xd7\x3d\x76\x38\x70\xc2\x8a\x72\xbd\xed\x38\x1d\x7d\xa7\xa7\x3f\x37\x83\x3d\x81\x2f\x5f\xfb\xce\x71\x41\xb4\x46\x69\x7c\xf3\x5f\xcb\xdb\x17\xf1\x8f\x77\x67\xcf\x3c\x73\x45\x67\x9c\xf2\x59\x9b\x7e\x34\x15\x82\x21\xd9\xc1\x05\x07\x00\x0d\x67\x6a\x58\xa1\x3c\x0e\xbb\x95\x93\x87\xbf\x21\x9f\xe9\xf9\x04\x2e\x5f\xbd\x1a\xb4\xe4\xba\x25\xf1\xe7\xbb\xdb\x98\xc4\x9f\x8d\x7c\xcf\x87\xb7\xa3\xbb\xd6\xd6\xe9\x73\xbf\xf7\xe5\xf2\xfc\xeb\x70\xdc\x78\xfc\xb1\x03\xe5\xa3\xc1\x39\x35\xaa\x0e\x00\x68\x8a\x5c\x53\xbd\xba\xd6\x5a\xd2\x69\xa1\xf1\xaf\xb8\x72\xa2\xe6\x94\x57\x72\x75\x49\x65\x98\x0f\x6f\xe3\x8f\x67\x5e\x10\xbf\x79\x7a\xe5\x48\x37\x02\xc2\xd1\x3c\x01\x4d\x7e\x43\x0e\x99\x14\x39\x28\xfb\xc0\x24\x27\x20\x3c\x05\x92\x7e\x2a\x94\xc6\x14\xb4\x00\xc2\x98\xb8\x07\xc2\x41\x2c\x9c\x7d\x81\x21\x49\x29\x9f\x41\xb4\x8c\xce\x21\x27\x9f\x4c\x06\xe4\x6c\x75\x6e\x51\xed\x7a\x94\x53\x5e\xee\x7a\x5e\x73\xaa\x20\x47\xc2\x15\xe8\x39\x42\x26\x0c\x55\x43\xc4\x99\x5f\x01\x91\x68\x58\x19\x47\xa1\x69\x53\x5e\xe5\x05\xbe\x18\x5d\x8e\x5e\x86\xbf\xe3\x4c\x88\xb3\x29\x91\xe5\xde\x32\x04\x58\x76\x41\x5c\x8c\x2e\xfd\xaf\x0a\x2c\x80\xaf\x7e\x36\xd0\x42\x63\x2f\xef\xae\x86\x2f\x7e\xbf\xbd\x88\x7f\xbc\xfb\x90\x3e\x3f\x1d\x5e\x4d\x3e\x8c\xc2\x8d\xd3\xab\xee\xad\x78\x38\xbc\x9a\xd4\x9b\xbf\x7f\x48\xed\x19\x5d\xc7\xff\x8c\xef\x8c\xbb\xfb\xdf\x9e\xe4\x8e\xc0\xa7\x9e\xe3\xd9\x30\x7c\x70\x66\x89\x34\x76\x2c\x64\x19\x52\x2d\xcf\xef\x72\xbd\xde\x44\x51\xc6\xfe\xca\xc4\x91\x9a\xc0\x97\xee\xac\xd3\xe5\xca\x11\x7c\x75\xae\xb8\x10\x8a\x6a\x21\x57\xaf\x05\xd7\xf8\xa0\xf7\xc9\x49\x06\xaa\x2f\x07\x59\x0a\xed\x1c\x11\xe8\x28\x12\xfa\xb6\x9b\x37\x61\xec\x26\xab\xb9\xf4\x94\x94\x16\x6a\x9d\x1a\xdb\x72\x96\xb2\x4e\x89\xc2\xbf\x4b\x16\xd5\x29\x6e\x4d\x64\xf3\x57\x82\x85\x5b\x9d\xb9\xa9\x2c\x2d\x61\x1e\xfb\x99\x2c\x16\x8d\xc4\xb8\x11\x15\x00\x79\x91\x9b\x0a\x54\x48\xf6\x2b\xd1\x73\x53\x82\xd4\x9c\x5c\xbe\xfa\x53\x9c\xd2\x19\x2a\x1d\xd4\xa2\xb6\x39\x77\xa4\x6c\x6d\x3c\xa3\x4a\xcb\x95\xa1\x7e\xf3\xfa\x4d\xb5\xbc\x33\x67\x40\x92\x04\x95\xda\xb1\x49\x31\x96\xb1\x50\xa6\x32\x96\xa8\xa8\x60\x68\x56\xf8\xa0\x91\x9b\x0a\xa2\x4e\xb7\x38\xcb\x00\x60\x46\xf5\xbc\x98\x5e\x6f\xe6\xbd\xd1\xdb\xec\xd2\xb8\x40\x70\xa0\x76\x27\x3b\xc8\x1b\xdb\x66\x73\x02\x56\xe6\x2f\x19\x6d\x41\x37\x5e\xba\x19\x22\x11\x79\x4e\xf5\xa6\x98\xe0\x82\xe3\x31\x76\x39\x52\xef\x5f\x04\x47\xe7\x18\x4a\x14\x32\xc1\x9f\xaa\x80\xdb\x43\x1c\xd3\x7b\x54\x8b\xb2\xaf\xa8\xd6\x86\x42\xb5\x70\x2e\xb4\x47\x0b\xb3\x26\xf8\xee\xc9\xae\x44\xc1\x07\x2d\xc9\x9b\x12\x60\x4b\x1b\xb9\x46\xe7\x11\x9a\xde\x1d\x8e\xe3\x80\xbe\x38\x0c\x63\xbb\xe6\xab\x9b\xac\x99\xfe\x3a\xa9\x38\xbc\x68\x3b\x60\x18\xb1\x3b\x80\x9b\x8b\x96\x07\x1e\x00\xb8\x6c\xf6\x6e\x81\xc9\x1e\x6e\x34\x27\x6a\x7e\xcd\x66\x42\x52\x3d\xcf\x6b\xe7\x32\x3d\x39\xa3\xca\xf6\xf3\xeb\x8f\x6d\x5b\x7b\xe0\x15\xa8\xc1\x70\x63\xf3\xdc\x2d\xc4\x0e\xfd\x76\x37\xc4\xc0\xb5\xd4\x44\x17\x12\xf7\x34\x12\xd9\x60\x01\xb3\xca\x31\xa5\xe4\xbd\x8f\xb9\xfd\x6d\x42\x8e\x56\xce\x6d\x55\x72\xd4\x50\xcd\xda\xf2\x7e\x8e\x0e\xc8\x15\x18\x91\xd9\xb6\xb4\x32\x0b\x04\xb7\x9d\x8d\xf6\x3b\x34\x4f\x39\x17\xad\x96\x15\xbd\x03\xed\xb6\xf5\xfe\xe5\xf8\x6d\x09\xf2\x3a\x6e\xc2\xab\x57\xa0\x67\x2f\x66\xc3\x9f\x6c\x0c\x2a\x99\xbc\xf5\x05\x6a\x6b\xa5\x27\xa6\x98\xa1\x44\x9e\xa0\xbd\x72\xc0\xb0\x9e\xb3\x30\x91\x10\x76\x5a\x16\x88\xbe\xaa\xe3\x53\xe7\x3b\x64\x98\x68\xb1\xed\xc2\xde\x9b\x69\xf7\xca\x85\xb6\x99\x2d\xc5\x3e\x54\xd1\x4a\xcf\x5d\xaf\xe1\x9d\x53\x91\xe3\xe7\x31\x1d\xf7\xe3\x5e\xfd\x3b\x45\xd8\x54\x3e\xe1\x04\x48\xa2\x0b\xc2\xd8\x6a\x52\x73\x8a\x6d\xe4\xdd\x8f\x41\x2d\x30\xa1\x84\x81\x44\x03\x9f\x58\x26\xff\xbf\x15\xf7\x80\x72\xda\x0e\x4e\xc1\xb1\x5d\x4e\x4b\x83\xda\x89\xd1\xf6\x7a\x18\x06\xb2\xf5\x52\x17\x3d\x75\x42\xdc\xb3\xf7\xf6\x04\xd4\xbe\xd3\x41\x38\xb1\xf8\x36\x86\x6b\x2a\xe7\xe5\x38\xa0\x50\x1a\x72\xa2\x93\x79\x10\x06\x6a\xad\x85\x5b\x6f\xc3\x99\x2d\x84\xc1\x56\xd8\x57\x7c\xef\xec\x2a\xad\x5c\x0e\x56\x6b\x50\xc1\x00\x11\xda\x43\xc4\x5e\x21\x1c\xb1\xfa\xf2\xe1\x0e\x61\xe7\x56\xdf\xba\x80\xb9\x13\x9a\x9b\x9b\xe4\xa4\x1e\x7c\xfe\x2f\xf6\x9f\x22\xa1\x7f\x66\x62\xf7\x06\xd4\x6a\xf7\x17\xca\x50\xad\x94\xc6\x7c\x7f\xdc\x9b\x2e\x86\x4f\x9d\x17\x44\x42\xdf\xe4\x64\x76\xd4\x0d\xd0\x2e\xa9\xa1\xf2\xd6\x57\xb6\x47\xb9\x1a\x86\x93\x04\xef\x29\x4d\x36\x5b\x66\x3d\xb5\x39\x8f\x50\x8c\x91\x95\x8f\xb8\xe3\xf4\x81\xa8\x14\x29\x82\xfa\x96\x9f\xf5\x75\xa7\xd7\x46\x81\x66\xab\x60\xda\xd3\x9c\x70\x9a\xa1\xd2\xed\xbe\xb4\xc5\xf4\xc0\xe6\xd7\x59\xc6\xa5\x66\x17\x28\x4e\x02\x05\x5a\x6c\xe1\xd8\x76\xd4\x75\x76\x0e\xc2\xb3\xd2\x44\xce\x50\x63\x0a\x89\xe0\xba\x6a\x7e\x7a\xc9\x2b\xfa\x79\xa3\x2e\xe6\x39\x50\x0e\xd3\x95\x46\xe5\x79\x4c\x8d\xb1\xdb\x74\x79\x91\x4f\xcd\x81\x0e\x00\x7a\x43\xf6\x08\x77\xc9\x28\xc3\xba\x12\x1e\xeb\x31\x1d\x12\xd6\xde\xe3\x59\xf5\xd9\xc5\x3f\x0f\xcd\x01\x7a\x4e\x34\x50\x65\x75\x37\xe6\xa7\xdc\x3e\xfb\xc1\x3c\x54\x3f\x40\x4a\xa5\xed\x9e\x57\xbd\xe7\xe1\xed\x76\xf3\x48\xf1\xf5\x04\x06\xbb\x69\xc7\xd9\x66\xe7\x6c\x3a\xa6\x8d\x77\xb8\xa7\x7a\x5e\x9a\x26\x29\xa4\x44\xae\xeb\x06\x05\xea\xf7\xbe\x9b\xac\xe4\x53\xeb\xdb\xb2\xe7\x39\xe6\xc5\x5b\xd8\xd9\x77\x19\xf1\x7b\xf7\xb3\xbd\x96\xd8\xc3\x78\xcc\x96\xa3\xaf\x6d\x08\x0a\xea\xb7\x29\xe3\x03\x80\x7a\xfc\x75\x44\x28\x16\x7e\xb2\x7d\x64\xe1\x36\xc2\x54\x86\x2e\x36\x4c\xb1\x07\x00\x33\xe4\x28\x69\xf2\x5f\x9c\x40\x97\x12\xb8\x21\x74\xb9\xf8\xd6\x31\xfb\x38\xe3\x9e\x3f\x58\x4c\xd7\x07\xe7\xf6\x9f\x2a\xa4\x1b\x2e\xfa\xad\x1a\xf3\xe6\x77\x27\xfb\x7a\xe0\x93\xf8\xd3\xbe\x93\x31\xb5\x69\xb0\xdc\x2c\xc1\x76\xfe\x93\xd1\xc4\x5e\x28\x7d\x25\x2e\x3b\x43\xb3\x0c\xa6\x64\xde\xbd\xf4\xa1\x9a\x96\x13\x88\x47\xba\x12\xb7\x5e\x5a\x05\x6f\xe6\x5c\xe3\xfe\x48\x7c\x64\xf3\x66\x55\x0f\x74\xf6\xa7\xbf\x76\x53\xde\xf0\xc2\xbb\x1e\x1a\x45\xbb\x20\xb4\x5b\x9e\x9d\x90\x5a\x29\x37\x1a\x0c\x5a\xee\x12\x7a\xba\xc9\x9b\x0b\xfa\x8f\x3a\xb7\xc6\x10\xfd\x46\x79\x5a\xfe\x0c\x3f\x61\x8b\x9d\x5b\x45\x83\xa6\x0b\xd4\xe8\x0d\xdf\x0c\x5d\x3d\xb8\xb0\xe5\xa3\xd6\x57\x80\xd5\x47\x7e\xe7\xee\xb1\x12\x99\xbe\x27\x12\xeb\x07\xb6\xeb\x34\x32\xf5\xd2\x4f\x04\x57\x7a\x02\x51\xf5\x71\x5f\xa0\x8f\xd7\xc0\x21\x77\x1a\xcc\x80\x44\x5d\x9f\x51\xec\xf6\x8d\x58\xeb\xfc\xfb\x8f\x72\xed\x53\x89\x08\x4e\x7c\x37\xcc\x56\xe7\x70\x8f\x20\x38\x5b\x95\x9f\x07\xd9\x4b\xa3\xe0\xd8\x08\xfc\xee\x98\x29\xdf\x2e\x54\x6f\x0c\x8e\xf8\xb6\xad\xa2\x11\xfd\x27\x00\x00\xff\xff\x5c\x0b\x88\xbe\xbc\x29\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 10684, mode: os.FileMode(420), modTime: time.Unix(1682092380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
