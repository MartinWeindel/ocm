// Code generated for package jsonscheme by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xdb\x6e\x1b\xb9\xf5\x5d\x5f\x71\xb0\x36\x40\x3b\xf6\x48\x8e\xd2\x14\x88\x5e\x0c\x37\x8b\x02\x41\xbb\xeb\x45\xb2\xed\x43\x1d\x75\x41\xcd\x1c\x49\xcc\x72\x48\x95\xe4\x28\x9e\xbd\xfc\x7b\x41\x72\x38\x37\xcd\xe8\x6a\xa7\x2d\x1a\xbf\x58\xe4\x9c\x1b\x0f\xcf\x7d\xe6\x9c\x25\x13\x20\x4b\x63\x56\x7a\x32\x1a\x2d\xa8\x4a\x50\xa0\x1a\xc6\x5c\x66\xc9\x48\xc7\x4b\x4c\xa9\x1e\xc5\x32\x5d\x49\x81\xc2\x44\x09\xea\x58\xb1\x95\x91\x2a\x92\x71\x1a\xad\x5f\x91\xc1\xb9\x87\xaa\x51\xf9\xa4\xa5\x88\xfc\xee\x50\xaa\xc5\x28\x51\x74\x6e\x46\xe3\x9b\xf1\x4d\xf4\x72\x5c\x10\x25\x83\x40\x8a\x49\x31\x01\x72\xff\xf6\x3b\x78\x1b\xd8\xc0\xb7\x25\x1b\x58\xbf\x82\x0a\x63\xce\x04\xb3\x08\x7a\x32\x00\x48\xd1\x50\xfb\x1f\xc0\xe4\x2b\x9c\x00\x91\xb3\x4f\x18\x1b\xe2\xb6\x9a\xd4\xcb\x03\xc0\x1a\x95\x66\x52\x38\xe4\x84\x1a\xea\xa1\x15\xfe\x2b\x63\x0a\x13\x4f\x0e\x20\x02\x22\x68\x8a\xa4\x5a\x16\x78\x7e\x87\x26\x89\x13\x83\xf2\x1f\x94\x5c\xa1\x32\x0c\xf5\x04\xe6\x94\x6b\x74\xcf\x57\xd5\x6e\x41\xc1\x52\x0b\xbf\x01\xce\x15\xce\x27\x40\xce\x46\xb5\x13\x55\x4a\xfe\xbe\xc6\xb9\x60\xbb\x03\x55\x21\xa7\x8f\x98\x7c\xc0\x74\x8d\x2a\xa0\x72\x3a\x43\xae\x77\x60\x7a\xa0\x80\xb2\x52\x72\xcd\x12\x54\x3b\x90\x02\x18\x19\x0c\x9a\x6c\x8a\x7b\xa0\x4a\xd1\xdc\xd3\x64\x06\xd3\x52\x86\x7e\x09\x48\x20\xd4\x7b\x9f\x7b\xdc\x10\xe5\x19\xee\xbe\x9f\x01\x40\x43\xd3\x0d\x8e\xda\x28\x26\x16\x9e\x48\x4a\x1f\xff\x8a\x62\x61\x96\x13\x18\xbf\x7e\xed\xef\x95\x1a\x83\xca\x1a\xd4\x3f\x1f\x68\xf4\xcb\x4d\xf4\x66\xf8\x31\x9a\x5e\x3d\x0c\xa7\x76\x39\xfd\x75\x7c\xfd\x87\xdf\x47\x0f\x91\x7f\x34\xfa\x69\x38\x7d\x71\xee\x74\xc4\x12\x14\x86\x99\xfc\xce\x18\xc5\x66\x99\xc1\xbf\x60\xee\xf9\xa6\x4c\x94\x4c\x7a\x58\x4c\x2f\x1e\xa2\x9f\xae\x8a\xdf\x2f\xc2\xe6\xe5\xad\x27\xdd\xb8\x7a\x4f\xf3\x0c\x0c\xfd\x19\x05\xcc\x95\x4c\x41\xbb\x07\xd6\x0d\x81\x8a\x04\x68\xf2\x29\xd3\x06\x13\x30\x12\x28\xe7\xf2\x33\x50\x01\x72\xe5\x95\x05\x1c\x69\xc2\xc4\x02\xc8\x9a\x5c\x43\x4a\x3f\x59\x2f\x17\x3c\xbf\x76\xa8\x6e\x3d\x4c\x99\x28\x76\x03\xaf\x25\xd3\x90\x22\x15\x1a\xcc\x12\x61\x2e\x2d\x55\x4b\xc4\xeb\x52\x03\x55\x68\x59\xc1\x9a\x72\x96\x34\xe5\xd5\x41\xe0\x97\xc3\xf1\xf0\x55\xfd\x77\x34\x97\xf2\x6a\x46\x55\xb1\xb7\xae\x03\xac\xbb\x20\x5e\x0e\xc7\xe1\x57\x09\x56\x83\x2f\x7f\x36\xd0\xea\xca\x5e\x4f\x6f\x2f\x6e\x7e\x7b\x78\x19\xbd\x99\x7e\x4c\x5e\x5c\x5e\xdc\x4e\x3e\x0e\xeb\x1b\x97\xb7\xdd\x5b\xd1\xc5\xc5\xed\xa4\xda\xfc\xed\x63\xe2\xee\xe8\x2e\xfa\x47\x34\x7d\xb8\x89\xde\x84\xdf\x81\xe4\x9e\xc0\x97\x81\xe3\xd5\x45\xfd\xc1\x95\x23\xd2\xd8\x71\x90\xe7\xa4\xcb\x8c\xbb\x4c\xaf\xd7\xc3\x8a\xa0\x95\x5b\xa7\xd0\x13\xf8\xb5\xdb\x5d\xbb\x4c\x99\xc0\xef\xde\x14\x57\x52\x33\x23\x55\xfe\x56\x0a\x83\x8f\xe6\x10\x67\xb6\x50\xa4\x27\x78\x3a\x0a\x65\x48\xda\x3c\xa3\x8c\xd9\xfb\x6e\xde\x94\xf3\xfb\x79\xc5\xa5\x27\x78\xb6\x50\xab\x98\xd2\x96\xb3\x90\x75\x46\x35\xfe\x4d\x71\x52\xee\x6e\x8a\x6c\xff\x0a\xb0\xfa\x56\x67\xa0\xf1\x7f\x8d\xa0\xf4\x1d\x5d\xad\x98\x58\xec\x89\x0a\x80\x22\x4b\x27\xf0\x40\x32\xc5\x7f\xa0\x66\x49\xae\x81\xe8\x25\x1d\xbf\xfe\x63\x94\xb0\x05\x6a\x43\xa6\x83\x16\x9d\x43\x29\x3b\x1d\x2f\x98\x36\x2a\xb7\xd4\xef\xdf\xbe\x2b\x97\x53\x7b\x07\x34\x8e\x51\xeb\x3d\xd3\xb1\xd5\x8c\x83\x82\xb9\x54\x05\x2a\x6a\xb8\xb0\x2b\x7c\x34\x28\x6c\xce\xd3\x97\x3b\x8c\x65\x00\xb0\x60\x66\x99\xcd\xee\xb6\xf3\xde\x6a\x6d\x6e\x69\x4d\xa0\x76\xa1\x6e\x67\x7e\x94\x35\xb6\xd5\xe6\x05\x2c\xd5\x5f\x30\xda\x81\x6e\xad\x74\x3b\x44\x2c\xd3\x94\x99\x6d\x3e\x21\xa4\xc0\x53\xf4\x72\xe2\xb9\xbf\x97\x02\xbd\x61\x68\x99\xa9\x18\xbf\x2d\x1d\xee\x00\x71\x6c\x82\x2f\x17\x45\x25\x54\xae\x2d\x85\x72\xe1\x4d\x68\xaf\xda\xab\x47\xf0\xfd\x83\x5d\x81\x82\x8f\x46\xd1\x77\x05\xc0\x8e\x82\x69\x83\xce\x13\x94\x77\x87\x9a\x61\x69\x83\x47\xd4\x85\x75\xe7\x76\x6b\x91\xdf\xcf\x9b\x41\xb1\x93\x8a\xc7\x23\xbb\x01\xeb\x7e\xbc\x07\xb8\x6d\x34\x02\xf0\x00\xc0\xc7\xb8\x0f\x2b\x8c\x0f\x30\xae\x25\xd5\xcb\x3b\xbe\x90\x8a\x99\x65\x5a\x99\x9c\x54\x29\xe5\x4c\x53\xcb\x68\xf3\xb1\xab\x31\x8f\x6c\x01\x1a\x0c\xdb\x37\xe7\x2f\x2e\x18\x6c\xa7\x10\x5b\x51\x9c\x60\x3d\x10\xd6\x09\xd9\x42\x50\x93\x29\x3c\x50\x49\x74\x8b\x06\xec\x2a\xc5\x84\xd1\x1f\x83\x27\x1e\xae\x13\x7a\xf2\xe1\xfc\x56\x29\x47\x05\xd5\xcc\x38\x3f\x2e\xd1\x03\xf9\xb4\x23\xe7\xae\x58\x2d\xd5\x02\xb5\xe6\x61\xab\xfe\x8e\x8d\x5e\xde\x44\xcb\x65\x49\xef\x48\xbd\x75\x85\xb4\x86\x42\x3c\xbf\x1d\x4e\x5e\xf9\x4d\x38\x79\xeb\x9c\xbd\x98\x0d\x7b\x72\x3e\xa8\x55\xfc\x3e\xa4\xad\x9d\xf9\x9f\xda\x14\x87\x0a\x45\x8c\xae\x11\x81\x8b\x6a\xc2\xc0\x65\x4c\xf9\x65\x91\x36\xfa\x72\x51\x08\xa8\x1f\x90\x63\x6c\xe4\xae\x86\xb5\x37\xfe\x1e\x14\x0b\x5d\x89\x5b\x88\x7d\xec\x41\xcb\x73\xee\xdb\xd5\x76\x4e\x05\x4e\x9f\x47\x74\xb4\xc0\xbd\xe7\xef\x14\x61\x5b\x52\x85\x33\xa0\xb1\xc9\x28\xe7\xf9\xa4\xe2\x14\x39\xcf\xfb\x3c\x02\xbd\xc2\x98\x51\x0e\x0a\x2d\x7c\xec\x98\xfc\xef\xe6\xe1\x23\xd2\x69\xdb\x39\xa5\xc0\x76\x3a\x2d\x14\x2a\x32\xce\xf7\xc8\x87\x75\x47\x76\x56\xea\xbd\xa7\x0a\x88\x07\x56\xe4\x81\x80\x3e\x74\x3a\x06\x67\x0e\xdf\xf9\x70\x45\xe5\xba\x18\x12\x64\xda\x40\x4a\x4d\xbc\xac\xb9\x81\xde\x28\xec\x36\x8b\x73\xee\x12\x61\x6d\xab\x5e\x57\x7c\xad\xf7\xca\x53\xf9\x18\xac\x37\xa0\x6a\xf3\x38\x68\xcf\xe4\x7a\x85\xf0\xc4\xaa\x96\xc4\x5f\xc2\xde\x15\xa7\x33\x01\xdb\x29\xda\x7e\x4e\x09\xca\xff\xab\xeb\x4f\x19\xb3\x3f\x71\xb9\x7f\x01\xea\x4e\xf7\x67\xc6\x51\xe7\xda\x60\x7a\x38\xee\x7d\x17\xc3\xe7\x8e\x0b\x32\x66\xef\x52\xba\x38\xa9\x2f\x74\x4b\x66\xa9\xbc\x0f\x99\xed\x49\x1a\xc6\xfa\x7c\x21\x58\x4a\x93\xcd\x8e\x09\x50\xa5\xce\x13\x0e\xc6\x69\x1e\x3c\xee\xb4\xf3\x00\x29\x44\x22\x50\xf5\xfe\xf3\xbe\xea\xf4\xce\x1e\xa0\x59\x2a\xd8\xf2\x34\xa5\x82\xcd\x51\x9b\x76\x5d\xda\x62\x7a\x64\xf1\xeb\x35\xe3\x43\xb3\x77\x14\x2f\x81\x06\x23\x77\x70\x6c\x1b\xea\x26\x3b\x0f\x11\x58\x19\xaa\x16\x68\x30\x81\x58\x0a\x53\x16\x3f\xbd\xe4\x35\xfb\x65\xeb\x59\xec\x73\x60\x02\x66\xb9\x41\x1d\x78\xcc\xac\xb2\xdb\x74\x45\x96\xce\xc2\x7b\x8a\x3e\x97\x3d\xc1\x5c\xe6\x8c\x63\x95\x09\x4f\xb5\x98\x0e\x09\x2b\xeb\x09\xac\xfa\xf4\x12\x9e\xd7\xd5\x01\x66\x49\x0d\x30\xed\xce\x6e\xd5\xcf\x84\x7b\xf6\x8d\x7d\xa8\xbf\x81\x84\x29\x57\x3d\xe7\xbd\xf7\x11\xf4\x76\xff\x44\xfe\xf5\x0c\x0a\xbb\x6f\xfb\xd9\x76\xe3\x6c\x1a\xa6\xf3\x77\xf8\xcc\xcc\xb2\x50\x4d\x9c\x29\x85\xc2\x54\x05\x0a\x54\x6f\x3c\xb7\x69\x29\x84\xd6\xf7\x45\xcd\x73\xca\x7b\xac\x7a\x65\xdf\xa5\xc4\xaf\xd5\xcf\xee\x5c\xe2\x2e\xe3\x29\x4b\x8e\xbe\xb2\xa1\x96\x50\xbf\x4c\x1a\x1f\x00\x54\xe3\xaf\x13\x5c\x31\x0b\xf3\xee\x13\x13\xb7\x15\xa6\x54\x74\xb6\x65\xb6\x3d\x00\x58\xa0\x40\xc5\xe2\xff\xe0\x5c\xba\x90\xc0\x8f\xa6\x8b\xc5\x97\xf6\xd9\xa7\x19\xf7\xfc\x9f\xf9\x74\x75\x71\x7e\xff\xb9\x5c\xba\x61\xa2\x5f\xaa\x30\x6f\x7e\x77\x71\xa8\x05\x3e\x8b\x3d\x1d\x3a\x19\xd3\xdb\x06\xcb\xcd\x14\xec\xe6\x3f\x73\x16\xbb\x86\x32\x64\xe2\xa2\x32\xb4\xcb\xda\x94\x2c\x98\x97\x39\xf6\xa4\xc5\x04\xe2\x89\x5a\xe2\xd6\xab\xac\xda\xfb\x3a\x5f\xb8\x3f\x11\x1f\xd5\xec\xac\xaa\x81\xce\xe1\xf4\x37\x3a\xe5\x2d\xaf\xc1\xab\xa1\x11\xd9\x07\xa1\x5d\xf2\xec\x85\xd4\x0a\xb9\x64\x30\x68\x99\x4b\xdd\xd2\x6d\xdc\x5c\xb1\xbf\x57\xb1\x35\x02\xf2\x33\x13\x49\xf1\xb3\xfe\x09\x57\xe4\xcd\x8a\x0c\x9a\x26\x50\xa1\x37\x6c\xb3\x6e\xea\xb5\x86\x2d\x1d\xb6\xbe\x7f\x5b\xbf\xf2\x65\xa5\x65\xda\x4b\x20\x96\x42\x9b\x09\x90\xf2\xeb\xb5\x9a\xc0\x41\x44\x8f\xdc\xa9\x11\x0b\x42\xba\xbe\x9e\xd8\xef\x9b\xaa\xd6\x05\xf7\xdf\xd5\xc6\x17\x12\x04\xce\x42\xb9\xcb\xf3\x6b\xf8\x8c\x20\x05\xcf\x8b\xaf\x82\x5c\x57\x28\x05\x36\x3c\xbb\xdb\x29\x8a\xd7\x07\xe5\x2b\x81\x13\xbe\x05\x2b\x69\x90\x7f\x07\x00\x00\xff\xff\x2f\xce\x6b\x28\x97\x28\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 10391, mode: os.FileMode(436), modTime: time.Unix(1655742294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"..": &bintree{nil, map[string]*bintree{
						"..": &bintree{nil, map[string]*bintree{
							"..": &bintree{nil, map[string]*bintree{
								"..": &bintree{nil, map[string]*bintree{
									"resources": &bintree{nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": &bintree{ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
