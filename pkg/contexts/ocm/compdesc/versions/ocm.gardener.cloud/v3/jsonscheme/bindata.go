// Code generated for package jsonscheme by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xdb\x72\xdb\xb8\xf5\x5d\x5f\x71\x66\xed\x19\xda\xb1\x29\x39\x4a\xd3\x99\xe8\xc5\xe3\x66\xa7\x33\x99\x76\xd7\x3b\xc9\xb6\x0f\x75\xd4\x1d\x88\x3c\x94\x90\x05\x01\x15\x00\x15\x73\xb3\xf9\xf7\x0e\x00\x82\x37\x91\xa2\x2e\x4e\xda\x4e\xe3\x17\x0b\xe0\xb9\xe1\xe0\xdc\xc9\x73\x1a\xcf\x20\x58\x69\xbd\x56\xb3\xc9\x64\x49\x64\x8c\x1c\xe5\x38\x62\x22\x8b\x27\x2a\x5a\x61\x4a\xd4\x24\x12\xe9\x5a\x70\xe4\x3a\x8c\x51\x45\x92\xae\xb5\x90\xa1\x88\xd2\x70\xf3\x22\x18\x9d\x3b\xa8\x1a\x95\x0f\x4a\xf0\xd0\xed\x8e\x85\x5c\x4e\x62\x49\x12\x3d\x99\xde\x4c\x6f\xc2\xe7\xd3\x82\x68\x30\xf2\xa4\xa8\xe0\x33\x08\xee\x5f\xff\x00\xaf\x3d\x1b\xf8\xbe\x64\x03\x9b\x17\x50\x61\x24\x94\x53\x83\xa0\x66\x23\x80\x14\x35\x31\xff\x01\x74\xbe\xc6\x19\x04\x62\xf1\x01\x23\x1d\xd8\xad\x26\xf5\xf2\x00\xb0\x41\xa9\xa8\xe0\x16\x39\x26\x9a\x38\x68\x89\xff\xca\xa8\xc4\xd8\x91\x03\x08\x21\xe0\x24\xc5\xa0\x5a\x16\x78\x6e\x87\xc4\xb1\x15\x83\xb0\x9f\xa4\x58\xa3\xd4\x14\xd5\x0c\x12\xc2\x14\xda\xe7\xeb\x6a\xb7\xa0\x60\xa8\xf9\xdf\x00\xe7\x12\x93\x19\x04\x67\x93\xda\x89\x2a\x25\xff\x58\xe3\x5c\xb0\x1d\x40\x95\xc8\xc8\x23\xc6\xef\x30\xdd\xa0\xf4\xa8\x8c\x2c\x90\xa9\x01\x4c\x07\xe4\x51\xd6\x52\x6c\x68\x8c\x72\x00\xc9\x83\x05\xa3\x51\x93\x4d\x71\x0f\x44\x4a\x92\x3b\x9a\x54\x63\x5a\xca\xd0\x2f\x41\xe0\x09\xf5\xde\xe7\x1e\x37\x44\x58\x56\xac\x87\xf4\xef\xe8\x2b\x2d\x29\x5f\x7a\x45\x1b\xec\x19\x7c\xfa\x3c\x78\xc1\x23\x80\xc6\x55\x35\x44\x76\x34\x9d\x14\x29\x79\xfc\x2b\xf2\xa5\x5e\xcd\x60\xfa\xf2\xa5\x13\x8c\x68\x8d\xd2\x58\xe4\x3f\x1f\x48\xf8\xdb\x4d\xf8\x6a\xfc\x3e\x9c\x5f\x3d\x8c\xe7\x66\x39\xff\x34\xbd\xfe\xc3\xe7\xc9\x43\xe8\x1e\x4d\x7e\x19\xcf\x9f\x9d\x5b\x25\xd3\x18\xb9\xa6\x3a\xbf\xd3\x5a\xd2\x45\xa6\xf1\x2f\x98\x3b\xbe\x29\xe5\x25\x93\x1e\x16\xf3\x8b\x87\xf0\x97\xab\xe2\xf7\x33\xbf\x79\x79\xeb\x48\x37\x6c\xc7\xd1\x3c\x03\x4d\x7e\x45\x0e\x89\x14\x29\x28\xfb\xc0\xf8\x31\x10\x1e\x03\x89\x3f\x64\x4a\x63\x0c\x5a\x00\x61\x4c\x7c\x04\xc2\x41\xac\x9d\xb2\x80\x21\x89\x29\x5f\x42\xb0\x09\xae\x21\x25\x1f\x4c\x98\xe0\x2c\xbf\xb6\xa8\x76\x3d\x4e\x29\x2f\x76\x3d\xaf\x15\x55\x90\x22\xe1\x0a\xf4\x0a\x21\x11\x86\xaa\x21\xe2\x74\xa9\x80\x48\x34\xac\xcc\x15\xd1\xb8\x29\xaf\xf2\x02\x3f\x1f\x4f\xc7\x2f\xea\xbf\xc3\x44\x88\xab\x05\x91\xc5\xde\xa6\x0e\xb0\xe9\x82\x78\x3e\x9e\xfa\x5f\x25\x58\x0d\xbe\xfc\xd9\x40\xab\x2b\x7b\x33\xbf\xbd\xb8\xf9\xfd\xe1\x79\xf8\x6a\xfe\x3e\x7e\x76\x79\x71\x3b\x7b\x3f\xae\x6f\x5c\xde\x76\x6f\x85\x17\x17\xb7\xb3\x6a\xf3\xf7\xf7\xb1\xbd\xa3\xbb\xf0\x1f\xe1\xfc\xe1\x26\x7c\xe5\x7f\x7b\x92\x7b\x02\x5f\x7a\x8e\x57\x17\xf5\x07\x57\x96\x48\x63\xc7\x42\x9e\x07\x5d\x66\xdc\x65\x7a\xbd\x2e\x5a\x78\x5d\x6e\x9c\x42\xcd\xe0\x53\xb7\xbf\x77\x99\x72\x00\x9f\x9d\x29\xae\x85\xa2\x5a\xc8\xfc\xb5\xe0\x1a\x1f\xf5\x21\xd1\xc0\x40\xf5\x79\xbf\xa5\xd0\xf2\xfe\xfa\x19\x45\x44\xdf\x76\xf3\x26\x8c\xdd\x27\x15\x97\x9e\xe8\xdb\x42\xad\x82\x52\x5b\xce\x42\xd6\x05\x51\xf8\x37\xc9\x82\x72\x77\x5b\x64\xf3\x57\x80\xd5\xb7\x3a\x03\x8d\xfb\x6b\x04\xa5\x1f\xc8\x7a\x4d\xf9\x72\x4f\x54\x00\xe4\x59\x3a\x83\x87\x20\x93\xec\x27\xa2\x57\xc1\x35\x04\x6a\x45\xa6\x2f\xff\x18\xc6\x74\x89\x4a\x07\xf3\x51\x8b\xce\xa1\x94\xad\x8e\x97\x54\x69\x99\x1b\xea\xf7\xaf\xdf\x94\xcb\xb9\xb9\x03\x12\x45\xa8\xd4\x9e\xf9\xdc\x68\xc6\x42\x41\x22\x64\x81\x8a\x0a\x2e\xcc\x0a\x1f\x35\x72\x93\x34\xd5\xe5\x80\xb1\x8c\x00\x96\x54\xaf\xb2\xc5\xdd\x6e\xde\x3b\xad\xcd\x2e\x8d\x09\xd4\x2e\xd4\xee\x24\x47\x59\x63\x5b\x6d\x4e\xc0\x52\xfd\x05\xa3\x01\x74\x63\xa5\xbb\x21\x22\x91\xa6\x54\xef\xf2\x09\x2e\x38\x9e\xa2\x97\x13\xcf\xfd\xa3\xe0\xe8\x0c\x43\x89\x4c\x46\xf8\x7d\xe9\x70\x07\x88\x63\xb2\x7e\xb9\x28\x4a\xa9\x72\x6d\x28\x94\x0b\x67\x42\x07\x14\x0f\x5b\x82\xef\x1f\xec\x0a\x14\x7c\xd4\x92\xbc\x29\x00\x06\x2a\xae\x2d\x3a\x4f\x50\x1f\x1e\x6a\x86\xa5\x0d\x1e\x51\x58\xd6\x9d\xdb\xae\x79\x7e\x9f\x34\x83\x62\x27\x15\x87\x17\x0c\x03\xd6\xfd\x78\x0f\x70\xd3\xa9\x78\xe0\x11\x80\x8b\x71\xef\xd6\x18\x1d\x60\x5c\x2b\xa2\x56\x77\x6c\x29\x24\xd5\xab\xb4\x32\x39\x21\x53\xc2\xa8\x22\x86\xd1\xf6\x63\x5b\x66\x1e\xd9\x43\x34\x18\xee\x2c\x66\xbb\x85\xd8\xa3\xfe\xed\x86\x30\x4e\x48\x97\x9c\xe8\x4c\xe2\x81\x4a\x22\x3b\x34\x60\x56\x29\xc6\x94\xfc\xec\x3d\xf1\x70\x9d\x90\x93\x0f\xe7\xb6\x4a\x39\x2a\xa8\x66\xc6\xf9\x79\x85\x0e\xc8\xa5\x1d\x91\xd8\x62\xb5\x54\x0b\xd4\xba\x8f\x9d\xfa\x3b\x36\x7a\x39\x13\x2d\x97\x25\xbd\x23\xf5\x36\xd8\x0f\x39\x7e\x03\x4e\x5e\xf9\x8d\x3f\x79\xeb\x9c\xbd\x98\x0d\x7b\xb2\x3e\xa8\x64\xf4\xd6\xa7\xad\xc1\xfc\x4f\x4c\x8a\x43\x89\x3c\x42\xdb\x88\xc0\x45\x35\xa2\x60\x22\x22\xec\xb2\x48\x1b\x7d\xb9\xc8\x07\xd4\x77\xc8\x30\xd2\x62\xa8\xe3\xed\x8d\xbf\x07\xc5\x42\x5b\xe2\x16\x62\x1f\x7b\xd0\xf2\x9c\xfb\xb6\xc5\x9d\x63\x85\xd3\x07\x1a\x1d\x2d\x70\xef\xf9\x3b\x45\xd8\x95\x54\xe1\x0c\x48\xa4\x33\xc2\x58\x3e\xab\x38\x85\xd6\xf3\x3e\x4e\x40\xad\x31\xa2\x84\x81\x44\x03\x1f\x59\x26\xff\xbb\x79\xf8\x88\x74\xda\x76\x4e\xc1\xb1\x9d\x4e\x0b\x85\xf2\x8c\xb1\x3d\xf2\x61\xdd\x91\xad\x95\x3a\xef\xa9\x02\xe2\x81\x15\xb9\x27\xa0\x0e\x1d\xaf\xc1\x99\xc5\xb7\x3e\x5c\x51\xb9\x2e\x86\x04\x99\xd2\x90\x12\x1d\xad\x6a\x6e\xa0\xb6\x0a\xbb\xed\xe2\x9c\xd9\x44\x58\xdb\xaa\xd7\x15\xdf\xea\xbd\xf2\x54\x2e\x06\xab\x2d\xa8\xda\x40\x0f\xda\x43\xbd\x5e\x21\x1c\xb1\xaa\x25\x71\x97\xb0\x77\xc5\x69\x4d\xc0\x74\x8a\xa6\x9f\x93\x9c\xb0\xff\xea\xfa\x53\x44\xf4\x4f\x4c\xec\x5f\x80\xda\xd3\xfd\x99\x32\x54\xb9\xd2\x98\x1e\x8e\x7b\xdf\xc5\xf0\x4b\xc7\x05\x11\xd1\x37\x29\x59\x9e\xd4\x17\xda\x25\x35\x54\xde\xfa\xcc\xf6\x24\x0d\x63\x7d\xbe\xe0\x2d\xa5\xc9\x66\x60\x02\x54\xa9\xf3\x84\x83\x31\x92\x7b\x8f\x3b\xed\x3c\x10\x14\x22\x05\x50\xf5\xfe\x49\x5f\x75\x7a\x67\x0e\xd0\x2c\x15\x4c\x79\x9a\x12\x4e\x13\x54\xba\x5d\x97\xb6\x98\x1e\x59\xfc\x3a\xcd\xb8\xd0\xec\x1c\xc5\x49\xa0\x40\x8b\x01\x8e\x6d\x43\xdd\x66\xe7\x20\x3c\x2b\x4d\xe4\x12\x35\xc6\x10\x09\xae\xcb\xe2\xa7\x97\xbc\xa2\xbf\xed\x3c\x8b\x79\x0e\x94\xc3\x22\xd7\xa8\x3c\x8f\x85\x51\x76\x9b\x2e\xcf\xd2\x85\x7f\xd1\xd1\xe7\xb2\x27\x98\x4b\x42\x19\x56\x99\xf0\x54\x8b\xe9\x90\xb0\xb2\x1e\xcf\xaa\x4f\x2f\xfe\x79\x5d\x1d\xa0\x57\x44\x03\x55\xf6\xec\x46\xfd\x94\xdb\x67\xdf\x99\x87\xea\x3b\x88\xa9\xb4\xd5\x73\xde\x7b\x1f\x5e\x6f\xf7\x4f\xe4\x5f\x5f\x40\x61\xf7\x6d\x3f\xdb\x6d\x9c\x4d\xc3\xb4\xfe\x0e\x1f\xa9\x5e\x15\xaa\x89\x32\x29\x91\xeb\xaa\x40\x81\xea\x95\xe9\x2e\x2d\xf9\xd0\xfa\xb6\xa8\x79\x4e\x79\x11\x56\xaf\xec\xbb\x94\xf8\xad\xfa\x19\xce\x25\xf6\x32\x9e\xb2\xe4\xe8\x2b\x1b\x6a\x09\xf5\xeb\xa4\xf1\x11\x40\x35\xfe\x3a\xc1\x15\x33\x3f\xef\x3e\x31\x71\x1b\x61\x4a\x45\x67\x3b\x66\xdb\x23\x80\x25\x72\x94\x34\xfa\x0f\xce\xa5\x0b\x09\xdc\x68\xba\x58\x7c\x6d\x9f\x7d\x9a\x71\xcf\xff\x99\x4f\x57\x17\xe7\xf6\xbf\x94\x4b\x37\x4c\xf4\x6b\x15\xe6\xcd\x0f\x37\x0e\xb5\xc0\x2f\x62\x4f\x87\x4e\xc6\xd4\xae\xc1\x72\x33\x05\xdb\xf9\x4f\x42\x23\xdb\x50\xfa\x4c\x5c\x54\x86\x66\x59\x9b\x92\x79\xf3\xd2\xc7\x9e\xb4\x98\x40\x3c\x51\x4b\xdc\x7a\x95\x55\x7b\x5f\xe7\x0a\xf7\x27\xe2\x23\x9b\x9d\x55\x35\xd0\x39\x9c\xfe\x56\xa7\xbc\xe3\x35\x78\x35\x34\x0a\xf6\x41\x68\x97\x3c\x7b\x21\xb5\x42\x6e\x30\x1a\xb5\xcc\xa5\x6e\xe9\x26\x6e\xae\xe9\xdf\xab\xd8\x1a\x42\xf0\x2b\xe5\x71\xf1\xb3\xfe\x0d\x58\xe8\xcc\x2a\x18\x35\x4d\xa0\x42\x6f\xd8\x66\xdd\xd4\x6b\x0d\x5b\x3a\x6e\x7d\x40\xb7\x79\xe1\xca\x4a\xc3\xb4\x97\x40\x24\xb8\xd2\x33\x08\xca\xcf\xdf\x6a\x02\x7b\x11\x1d\x72\xa7\x46\x0c\x48\xd0\xf5\xf5\xc4\x7e\x1f\x65\xb5\x2e\xb8\xff\xae\xb6\xbe\x90\x08\xe0\xcc\x97\xbb\x2c\xbf\x86\x8f\x08\x82\xb3\xbc\xf8\x2a\xc8\x76\x85\x82\x63\xc3\xb3\xbb\x9d\xa2\x78\x7d\x50\xbe\x12\x38\xe1\x63\xb2\x92\x46\xf0\xef\x00\x00\x00\xff\xff\x4f\x76\xee\xf2\xd8\x28\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 10456, mode: os.FileMode(436), modTime: time.Unix(1655893162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"..": &bintree{nil, map[string]*bintree{
						"..": &bintree{nil, map[string]*bintree{
							"..": &bintree{nil, map[string]*bintree{
								"..": &bintree{nil, map[string]*bintree{
									"resources": &bintree{nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": &bintree{ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
