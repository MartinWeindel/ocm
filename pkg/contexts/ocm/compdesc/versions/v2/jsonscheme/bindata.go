// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package jsonscheme generated by go-bindata.
// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\xba\x15\x7f\xd7\x5f\x71\x70\x53\x40\x4e\x13\xc5\xad\xb7\x0e\xb8\x7e\x09\xb2\x5e\x6c\x28\xb6\xdd\x0c\xed\xdd\x1e\x96\x66\x05\x2d\x1d\xdb\xec\x28\xd2\x23\x29\x37\x6a\x6f\xfe\xf7\x81\xa4\xa8\x6f\xc9\x76\x9c\xb4\xdb\xd0\xbc\x44\xa4\xce\x17\x0f\x7f\xe7\x83\x94\x9f\xd1\x64\x0e\xe1\x5a\xeb\x8d\x9a\x4f\xa7\x2b\x22\x13\xe4\x28\x2f\x62\x26\xb2\x64\xaa\xe2\x35\xa6\x44\x4d\x63\x91\x6e\x04\x47\xae\xa3\x04\x55\x2c\xe9\x46\x0b\x19\x6d\x67\x61\xf0\xcc\x51\xd4\x24\x7c\x54\x82\x47\x6e\xf6\x42\xc8\xd5\x34\x91\x64\xa9\xa7\xb3\x17\xb3\x17\xd1\xcb\x59\x21\x30\x0c\xbc\x18\x2a\xf8\x1c\xc2\x3f\x16\x5a\xe1\xb5\xd7\x03\x3f\x95\x7a\x60\x3b\x83\x8a\x6d\x49\x39\x35\x5c\x6a\x1e\x00\xa4\xa8\x89\xf9\x0f\xa0\xf3\x0d\xce\x21\x14\x8b\x8f\x18\xeb\xd0\x4e\x35\x55\x94\x2b\x80\x6a\x05\x96\x3f\x21\x9a\x38\x06\x89\xff\xce\xa8\xc4\xc4\x49\x04\x88\x20\x74\x7a\xff\x8e\x52\x51\xc1\x1d\xd5\x46\x8a\x0d\x4a\x4d\x51\x79\xba\x06\x91\x9f\x2c\x4d\x52\x5a\x52\xbe\x0a\x83\x00\x80\x91\x05\xb2\x41\x7b\x7b\xd4\x73\x92\x62\x58\x0d\xb7\x84\x65\x38\x64\x85\xa1\x1d\x54\xee\x26\x2d\xff\x1c\xbe\xdc\xfb\x71\xdb\xe4\x0d\xd1\x1a\xa5\x71\xd7\x3f\xb7\x37\x2f\xa2\x1f\x6f\xcf\x9e\x79\x5e\x45\x57\x9c\xe8\x4c\x76\x75\x2c\x84\x60\x48\xb8\x5d\x61\xe9\xe5\x9f\x4b\x6b\x7a\x2c\x49\xc9\xdd\x9f\x91\xaf\xf4\x7a\x0e\xb3\x57\xaf\x82\x96\xe6\x1b\x12\x7d\xbe\xbd\x89\x48\xf4\xd9\x58\xf0\x7c\x72\x73\x71\xdb\x9a\x3a\x7d\xee\xe7\xbe\xcc\xce\x7f\x7b\x3f\x99\x36\xde\x7f\xe8\xe1\xf9\x60\x98\x4e\xcd\x6a\x02\x00\x9a\x20\xd7\x54\xe7\x57\x5a\x4b\xba\xc8\x34\xfe\x09\x73\x67\x6b\x4a\x79\x69\x58\x9f\x59\x46\xfb\xe4\x26\xfa\x70\xe6\x2d\xf1\x93\xa7\x97\x4e\xb4\x44\x46\xee\x30\x79\x87\xe9\x16\xa5\x93\x79\x02\x9a\xfc\x0b\x39\x2c\xa5\x48\x41\xd9\x17\x26\x2e\x80\xf0\x04\x48\xf2\x31\x53\x1a\x13\xd0\x02\x08\x63\xe2\x13\x10\x0e\xc2\x42\x96\x30\x60\x48\x12\xca\x57\x10\x6e\xc3\x73\x48\xc9\x47\x21\x23\xc1\x59\x7e\x6e\x59\xed\xf8\x22\xa5\xbc\x98\xf5\xba\xd6\x54\x41\x8a\x84\x2b\xd0\x6b\x84\xa5\x30\x52\x8d\x10\xe7\x7f\x05\x44\xa2\x51\x65\xb0\x40\x93\xa6\xbd\xca\x1b\xfc\xf2\x62\x76\xf1\x9b\xfa\x73\xb4\x14\xe2\x6c\x41\x64\x31\xb7\xad\x13\x6c\xfb\x28\x5e\x5e\xcc\xfc\x53\x49\x56\xa3\x2f\x1f\x1b\x6c\x75\x67\x6f\x6f\x2f\x27\x2f\x7e\xbd\x79\x19\xfd\x78\xfb\x3e\x79\x7e\x3a\xb9\x9c\xbf\xbf\xa8\x4f\x9c\x5e\xf6\x4f\x45\x93\xc9\xe5\xbc\x9a\xfc\xf5\x7d\x62\xf7\xe8\x2a\xfa\x47\x74\x6b\x10\xed\x9f\xbd\xc8\x3d\x89\x4f\xbd\xc6\xb3\x49\xfd\xc5\x99\x15\xd2\x98\xb1\x94\x45\xd4\x74\x33\x40\x07\x7a\x83\xd9\xa0\x08\xf0\xdc\x04\x92\x9a\xc3\x17\x78\x26\x71\x39\x87\xf0\x64\x5a\xcb\x81\xd3\x3e\x28\x87\x70\xef\xa0\xb8\x11\x8a\x6a\x21\xf3\xd7\x82\x6b\xbc\xd3\x87\x24\x1e\x43\x35\x94\x68\xac\x84\x91\x2c\x27\x62\xfa\xb6\x5f\x37\x61\xec\x7a\x59\x69\xe9\x5d\x51\xc7\xec\x2a\xff\xb5\xed\x2c\x6c\x5d\x10\x85\x7f\x93\x2c\xac\xb2\x58\xc7\x64\xf3\x57\x90\xd5\xa7\x06\xd2\xa4\xf9\x6b\x24\xb2\xbf\x90\xcd\x86\xf2\xd5\x9e\xac\x00\xc8\xb3\x74\x0e\x37\x61\x26\xd9\x5f\x89\x5e\x87\xe7\x10\xaa\x35\x99\xbd\xfa\x5d\x94\xd0\x15\x2a\x1d\xde\x06\x2d\x39\x87\x4a\xb6\x3e\x5e\x51\xa5\x65\x6e\xa4\x5f\xbf\x7e\x53\x0e\x6f\xcd\x1e\x90\x38\x46\xa5\xf6\x2c\x8d\xc6\x33\x96\x0a\x96\x42\x16\xac\xa8\x60\x62\x46\x78\xa7\x91\x9b\x22\xa1\x4e\x77\x80\x25\x00\x58\x51\xbd\xce\x16\x57\xe3\xba\x47\xd1\x66\x87\x06\x02\xb5\x0d\xb5\x33\xcb\x07\xa1\xb1\xed\x36\x67\x60\xe9\xfe\x42\xd1\x0e\x76\x83\xd2\x71\x8a\x58\xa4\x29\xd5\x63\x31\xc1\x05\xc7\x63\xfc\x72\xe4\xba\x7f\x16\x1c\x1d\x30\x94\xc8\x64\x8c\x3f\x95\x01\x77\x80\x39\xa6\xc1\x28\x07\x45\xeb\x50\x8e\x8d\x84\x72\xe0\x20\xf4\xf0\x3e\x05\x0e\x48\x76\x05\x0b\xde\x69\x49\xde\x14\x04\xf3\x03\xe5\x84\x43\xfd\xd0\x40\x86\xaa\xd5\xcc\xf0\x81\x30\x2c\x31\x68\x7b\x42\xd5\x61\x25\x52\x92\xbc\xe2\xa4\x1a\xd3\x46\x36\xeb\xb5\xcc\xca\xf2\x4c\xf5\x14\x60\xc7\x3c\xbf\x5e\x36\x53\x67\xaf\x10\xc7\x17\xee\x26\xac\x47\xfb\x1e\xe4\xe6\x7c\xe0\x89\x03\x00\x97\x09\xdf\x6d\x30\x3e\x00\x82\x6b\xa2\xd6\x57\x6c\x25\x24\xd5\xeb\xb4\x02\xa6\x90\x29\x61\x54\x11\xa3\xa8\xfb\xda\x76\xbd\x03\x60\x6c\x08\x6c\x6f\x82\xdb\x3e\x0f\xdb\x5e\x25\xa3\x2c\xae\xdd\xee\xa7\x08\x6a\x1d\xf5\x81\x4e\x20\x23\x2b\x34\xa3\x14\x13\x4a\x7e\xf1\xf1\xd8\x5d\x33\x39\xda\x78\x37\x55\xea\xa9\xa8\x9a\x75\xe5\x97\x35\x3a\x22\x57\x5c\xc4\xd2\xb6\xa4\xe5\xb2\xa1\x76\x9c\x19\xf5\xcf\x43\x73\x94\x83\x58\x39\x2c\xe5\x1d\x90\x98\x1a\x0b\x76\xf2\x76\x64\x87\x0a\xd7\x23\x27\xa7\x5e\xce\x06\x1e\x6c\x8c\x28\x19\xbf\xf5\xc5\x67\x67\x15\x27\xa6\x50\xa1\x44\x1e\xa3\x3d\x4e\xc0\xa4\x3a\xb4\x33\x11\x13\x76\x5a\x24\xff\xa1\x8a\xe2\xd3\xe2\x3b\x64\x18\x6b\x21\x1f\x9a\x45\x9f\x20\xa3\xd5\x4f\x96\x6f\xfd\x2a\x1f\xea\x97\x52\xd2\xbe\xc7\xee\x46\x2f\x58\x3f\x8e\x8f\x5f\x0b\xf4\x9c\x85\x07\xd7\xd9\xab\x62\xac\x52\xc2\x09\x90\x58\x67\x84\xb1\x7c\x5e\x69\x8a\x6c\xa0\x7d\x9a\x82\xda\x60\x4c\x09\x03\x89\x86\x3e\xb6\x4a\xfe\x77\x8b\xeb\x93\xd5\xc8\x76\x44\x0b\x8e\xed\x1a\x59\xe8\xe2\x19\x63\x7b\x14\xb9\x7a\xf4\xdb\x33\x98\x0b\xb9\x2a\x4b\x1e\xd8\x8c\x7b\x01\x6a\xef\x2b\xa2\x02\x93\x70\x62\xf9\x6d\xe0\x57\x52\xce\x8b\xfb\x81\x4c\x69\x48\x89\x8e\xd7\xb5\x60\x50\x9d\x9e\xae\xdb\x97\x33\x5b\xfd\x6a\x53\xf5\x66\xe1\x7b\xab\x57\xae\xca\x25\xee\x47\x42\xac\x13\x56\x9d\x46\xdc\x26\xec\xdd\x6c\x5a\x08\x98\x43\xa2\x39\xca\x49\x4e\xd8\xff\x41\xeb\x29\x62\xfa\x7b\x26\xf6\xef\x3d\xad\x0f\xfe\x40\x19\xaa\x5c\x69\x4c\x0f\xe7\xbd\xee\x53\xf8\xd4\xd9\x43\xc4\xf4\x4d\x4a\x56\x47\x1d\x1c\xed\x90\x1a\x29\x65\xdd\x7c\x94\x13\x65\xfd\x02\xc2\xe3\xa9\xa9\x66\xc7\x15\x51\xe5\xce\x23\x16\xc6\x48\xee\xe3\xf2\xb8\xf5\x40\x58\x98\x14\x42\x75\x39\xb0\x1c\x6a\x6c\xaf\xcc\x02\x9a\x6d\x85\xe9\x6c\x53\xc2\xe9\x12\x95\x6e\xb7\xb4\x2d\xa5\x0f\xec\x9b\x9d\x67\x5c\x02\x77\x81\xe2\x2c\x50\xa0\xc5\x0e\x8d\x6d\xa0\x76\xd5\x39\x0a\xaf\x4a\x13\xb9\x42\x8d\x09\xc4\x82\xeb\xb2\x51\x1a\x14\xaf\xe8\xe7\xd1\xb5\x98\xf7\x40\x39\x2c\x72\x8d\xca\xeb\x58\x18\x67\xb7\xe5\xf2\x2c\x5d\x98\x0d\x0d\x00\x06\x43\xf6\x08\xb8\x2c\x29\xc3\xaa\x5e\x1e\x8b\x98\x1e\x0b\x2b\xf4\x78\x55\x43\x7e\xf1\xef\xeb\xee\x00\xbd\x26\x1a\xa8\xb2\x6b\x37\xee\xa7\xdc\xbe\xfb\xc1\xbc\x54\x3f\x40\x42\xa5\x6d\xcc\xf3\xc1\xfd\xf0\x7e\xbb\x7e\xa4\xf8\x7a\x02\x87\x5d\xb7\xe3\x6c\x1c\x9c\x4d\x60\xda\x78\x87\x4f\x54\xaf\x0b\xd7\xc4\x99\x94\xc8\x35\xf4\x7d\xdd\x1b\xf3\x92\x4f\xad\x6f\x8b\xce\xe8\x98\x8f\x72\xf5\x53\x40\x9f\x13\xbf\xf7\x48\xbb\x6b\x89\xdd\x8c\xaf\xdf\x98\x0c\x35\x17\xb5\xb2\xfb\x75\x8a\x7d\x00\x50\xdd\x8f\x1d\x11\xb0\x99\xbf\x36\x3f\xb2\xbc\x1b\x63\xca\xed\xc8\x46\xae\xc8\x03\x80\x15\x72\x94\x34\xfe\x86\xd7\xdb\x85\x05\xee\x86\xbb\x18\x7c\x8f\xec\xff\x82\xc8\xae\x36\xc6\xcd\x7f\xdb\xc0\x6e\x00\xf5\x6b\x35\xf1\x65\x65\xda\xfb\xba\xea\xe0\xfb\xa9\x2e\x4e\x3b\x1f\x51\x55\xed\xe5\x46\x8a\x2d\x4d\xaa\x1d\x8d\x20\x6c\x5c\x32\x34\xef\xbc\xca\x7e\x5e\x35\xe4\x37\x38\x76\x61\x7f\xff\x2b\xaf\x23\x80\xd9\x5d\xf3\xc1\x38\xeb\x9c\x53\xc7\x0e\xa0\x9d\x6f\xdc\x21\x9c\xf8\x7e\x84\xe5\xe7\xf0\x09\x41\x70\x96\x17\xbf\xeb\xb0\x6d\xbb\xe0\xfe\x72\xda\xef\xc1\x8e\x48\x7a\xb2\x78\x29\xb6\xef\x91\x2e\x28\x5a\xdf\x14\x3d\x7f\x0f\x86\x1e\x47\x61\x57\x70\x05\x82\x87\xae\x6c\xff\xbd\xaf\x5f\xea\x85\x7b\x82\xa5\xd1\x6c\xee\xc5\xd4\x2a\x63\x36\x97\xf4\xbb\x14\xbe\xdc\x07\x41\xd0\x4a\x2c\xf5\xac\x11\x41\x98\xa2\xfb\x91\x5b\x3d\xb2\xc3\xa0\x19\xb7\xd5\x8f\xe9\x7a\x0d\xf2\x22\x5a\x09\x6d\x7c\x83\xc2\xfa\x77\x9c\x66\x73\x50\xdb\x90\xc6\x66\x8c\x7f\x1b\x09\xff\x13\x00\x00\xff\xff\x97\x07\x7a\x85\xaf\x28\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 10415, mode: os.FileMode(436), modTime: time.Unix(1658840508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"..": &bintree{nil, map[string]*bintree{
						"..": &bintree{nil, map[string]*bintree{
							"..": &bintree{nil, map[string]*bintree{
								"resources": &bintree{nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": &bintree{ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
