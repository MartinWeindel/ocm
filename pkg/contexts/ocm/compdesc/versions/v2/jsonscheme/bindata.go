// Code generated for package jsonscheme by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xdb\x6e\xe3\xb8\xf5\xdd\x5f\x71\xb0\x09\x20\x67\x12\xd9\x89\xdb\x29\x30\x7e\x09\xd2\x5d\xb4\x58\xb4\xdd\x14\x99\x6d\x1f\x9a\xb8\x0b\x5a\x3a\xb6\x99\x52\xa4\x4b\x52\x4e\xb4\xb3\xf3\xef\x05\x49\x51\x37\x4b\xb2\x1d\x27\xb3\x6d\x31\x79\x89\x48\x9d\xfb\x9d\x94\x4f\x69\x3c\x85\x60\xa5\xf5\x5a\x4d\xc7\xe3\x25\x91\x31\x72\x94\xa3\x88\x89\x34\x1e\xab\x68\x85\x09\x51\xe3\x48\x24\x6b\xc1\x91\xeb\x30\x46\x15\x49\xba\xd6\x42\x86\x9b\x49\x30\x38\x75\x10\x15\x0a\x8f\x4a\xf0\xd0\xed\x8e\x84\x5c\x8e\x63\x49\x16\x7a\x3c\xb9\x9c\x5c\x86\x57\x93\x9c\x60\x30\xf0\x64\xa8\xe0\x53\x08\xfe\x98\x73\x85\x6f\x3d\x1f\xf8\xae\xe0\x03\x9b\x09\x94\x68\x0b\xca\xa9\xc1\x52\xd3\x01\x40\x82\x9a\x98\xff\x00\x3a\x5b\xe3\x14\x02\x31\x7f\xc4\x48\x07\x76\xab\xce\xa2\xd0\x00\x4a\x0d\x2c\x7e\x4c\x34\x71\x08\x12\xff\x9d\x52\x89\xb1\xa3\x08\x10\x42\xe0\xf8\xfe\x1d\xa5\xa2\x82\x3b\xa8\xb5\x14\x6b\x94\x9a\xa2\xf2\x70\x35\x20\xbf\x59\x88\xa4\xb4\xa4\x7c\x19\x0c\x06\x00\x8c\xcc\x91\x75\xca\xdb\xc2\x9e\x93\x04\x83\x72\xb9\x21\x2c\x45\x4b\xa9\xd0\xe6\x07\x92\x60\x8d\xa2\x67\x67\xb6\x12\xf2\xfc\x67\xe4\x4b\xbd\x9a\xc2\xe4\xfd\x7b\x27\x3d\xd1\x1a\xa5\x31\xc8\x3f\xef\x49\xf8\xf3\x65\xf8\x61\xf4\x10\xce\xce\xef\x47\x33\xb3\x9c\x7d\x9a\x5c\xfc\xf6\xf3\xf8\x3e\x74\xaf\xc6\x3f\x8d\x66\xef\x4e\x2d\x43\x1a\x23\xd7\x54\x67\x37\x5a\x4b\x3a\x4f\x35\xfe\x09\x33\xc7\x37\xa1\xbc\x60\xd2\xc1\x62\x36\xbc\x0f\x7f\x3a\xcf\x9f\xdf\xf9\xcd\xb3\x6b\x47\x5a\x22\x23\xcf\x18\x7f\xc4\x64\x83\xd2\xd1\x3c\x01\x4d\xfe\x85\x1c\x16\x52\x24\xa0\xec\x0b\x13\x4b\x40\x78\x0c\x24\x7e\x4c\x95\xc6\x18\xb4\x00\xc2\x98\x78\x02\xc2\x41\x58\x37\x13\x06\x0c\x49\x4c\xf9\x12\x82\x4d\x70\x01\x09\x79\x14\x32\x14\x9c\x65\x17\x16\xd5\xae\x47\x09\xe5\xf9\xae\xe7\xb5\xa2\x0a\x12\x24\x5c\x81\x5e\x21\x2c\x84\xa1\x6a\x88\x38\x5b\x2a\x20\x12\x0d\x2b\xd8\x10\x46\xe3\xba\xbc\xca\x0b\x7c\x35\x9a\x8c\x7e\x53\x7d\x0e\x17\x42\x9c\xcf\x89\xcc\xf7\x36\x55\x80\x4d\x1b\xc4\xd5\x68\xe2\x9f\x0a\xb0\x0a\x7c\xf1\x58\x43\xab\x1a\x7b\x33\xbb\x1e\x5e\xfe\x72\x7f\x15\x7e\x98\x3d\xc4\xef\xce\x86\xd7\xd3\x87\x51\x75\xe3\xec\xba\x7d\x2b\x1c\x0e\xaf\xa7\xe5\xe6\x2f\x0f\xb1\xf5\xd1\x4d\xf8\x8f\x70\x76\x7f\x19\x7e\xf0\xcf\x9e\xe4\x9e\xc0\x67\x9e\xe3\xf9\xb0\xfa\xe2\xdc\x12\xa9\xed\x58\xc8\xd3\xa0\x2d\x8c\xdb\x42\xaf\x33\x83\xf2\xd4\xcc\x4c\x52\xa8\x29\x7c\x82\x53\x89\x8b\x29\x04\x27\xe3\x4a\xdd\x18\xb7\x85\x72\x00\x9f\x5d\x28\xae\x85\xa2\x5a\xc8\xec\x5b\xc1\x35\x3e\xeb\x43\x92\xd5\x40\x75\x95\x08\x4b\xa1\xa7\x32\x88\x88\xde\xb5\xf3\x26\x8c\xdd\x2e\x4a\x2e\xad\x1a\x6d\x89\x5d\xd6\x8c\xa6\x9c\xb9\xac\x73\xa2\xf0\x6f\x92\x05\xc5\xee\xb6\xc8\xe6\x2f\x07\xab\x6e\xb5\x16\x1a\xf7\x57\x2b\x4a\x7f\x21\xeb\x35\xe5\xcb\x3d\x51\x01\x90\xa7\xc9\x14\xee\x83\x54\xb2\xbf\x12\xbd\x0a\x2e\x20\x50\x2b\x32\x79\xff\xbb\x30\xa6\x4b\x54\x3a\x98\x0d\x1a\x74\x0e\xa5\x6c\x6d\xbc\xa4\x4a\xcb\x2c\x98\x19\xa3\x93\x28\x42\xa5\xf6\xec\x1f\xc6\x14\x16\x0a\x16\x42\xe6\xa8\xa8\x60\x68\x56\xf8\xac\x91\x9b\xe2\xaf\xce\x76\x44\xc7\x00\x60\x49\xf5\x2a\x9d\xdf\xf4\xf3\xee\x0d\x2f\xbb\x34\x3e\xaf\x78\xd0\xee\x2c\x5e\x14\x7e\x4d\x3b\x39\x01\x0b\x7b\xe7\x8c\x76\xa0\x9b\xb0\xec\x87\x88\x44\x92\x50\xdd\x97\x04\x5c\x70\x3c\xc6\x2e\x47\xea\xfd\x83\xe0\xe8\x02\x43\x89\x54\x46\xf8\x5d\x91\x61\x07\x88\x63\x3a\x76\xb1\xd8\xb8\x91\xa0\x58\x1b\x0a\xc5\xc2\x85\x50\x87\xe0\xbc\x68\xeb\x3d\x82\xef\x5f\xdd\x72\x14\x7c\xd6\x92\x7c\x9f\x03\x4c\x0f\xa4\xe3\x89\x6c\x9a\x73\x4e\x47\x49\xaa\x34\xc9\xe0\x85\x61\x58\xc4\xa0\x1d\x9c\xd4\x16\x2a\x91\x92\x64\x25\x26\xd5\x98\xd4\xca\x57\xab\x64\x96\x96\x47\xaa\x96\x00\xbb\xe6\xd9\xed\xa2\x5e\x2b\x5b\x89\x38\xbc\x60\x37\x60\x35\xdb\xf7\x00\x37\x43\xb4\x07\x1e\x00\xb8\xd2\xf7\x71\x8d\xd1\x01\x21\xb8\x22\x6a\x75\xc3\x96\x42\x52\xbd\x4a\xca\xc0\x14\x32\x21\x8c\x2a\x62\x18\x6d\xbf\xb6\xa3\x65\x47\x30\xd6\x08\x36\x9d\xe0\xdc\xe7\xc3\xb6\x95\x49\x2f\x8a\x65\xdc\x01\x61\x52\x91\x2e\x39\xd1\xa9\xc4\x03\x8d\x40\x7a\x34\x34\xab\x04\x63\x4a\x7e\xf4\xf9\xb8\xad\x33\x39\x5a\x78\xb7\x55\xf0\x29\xa1\xea\x7d\xe5\xc7\x15\x3a\x20\xd7\x5c\xc4\xc2\xce\xa0\x85\xda\x90\xcf\xfc\x3b\xed\xf3\xd2\x1a\xe5\x42\xac\x58\x16\xf4\x0e\x28\x4c\x35\x85\x1d\xbd\x1d\xd5\xa1\x8c\x6b\xaf\x59\x43\x8f\x4e\xcc\x5a\x3c\xd8\x1c\x51\x32\xba\xf3\xcd\x67\x67\x17\x27\xa6\x51\xa1\x44\x1e\xa1\x3d\x3f\xc0\xb0\x3c\xd9\x32\x11\x11\x76\x96\x17\xff\xae\x8e\xe2\xcb\xe2\x47\x64\x18\x69\x21\x5f\x5a\x45\xdf\xa0\xa2\x55\x8f\x85\x77\x5e\xcb\x97\xda\xa5\xa0\xb4\xef\xd9\xb4\x36\xfc\x55\xcf\xac\xfd\x67\xe7\x96\x83\x6c\xa7\x9e\xad\x2c\xfa\x3a\x25\x9c\x00\x89\x74\x4a\x18\xcb\xa6\x25\xa7\xd0\x26\xda\xd3\x18\xd4\x1a\x23\x4a\x18\x48\x34\xf0\x91\x65\xf2\xbf\xdb\x5c\xdf\xac\x47\x36\x33\x5a\x70\x6c\xf6\xc8\x9c\x17\x4f\x19\xdb\xa3\xc9\x55\xb3\xdf\x1e\xba\x5c\xca\x95\x55\xf2\xc0\x61\xdc\x13\x50\x7b\xdf\xa3\xe4\x31\x09\x27\x16\xdf\x26\x7e\x49\xe5\x22\xbf\x10\x48\x95\x86\x84\xe8\x68\x55\x49\x06\xb5\x35\xd3\x6d\xcf\xe5\xcc\x76\xbf\xca\x56\x75\x58\xf8\x3a\xea\x15\x5a\xb9\xc2\xfd\x4a\x11\xeb\x88\x95\xa7\x11\xe7\x84\xbd\x87\x4d\x1b\x02\xe6\xcc\x69\x8e\x72\x92\x13\xf6\x7f\x30\x7a\x8a\x88\xfe\x9e\x89\xfd\x67\x4f\x6b\x83\x3f\x50\x86\x2a\x53\x1a\x93\xc3\x71\x6f\xdb\x18\xbe\x75\xf5\x10\x11\xfd\x3e\x21\xcb\xa3\x0e\x8e\x76\x49\x0d\x95\xa2\x6f\xbe\xca\x89\xb2\x7e\xe3\x90\x47\x4a\x8d\xcd\x8e\x3b\xa1\xd2\x9c\x47\x28\xc6\x48\xe6\xf3\xf2\x38\x7d\x20\xc8\x45\x0a\xa0\xbc\x1c\x58\x74\x0d\xb6\x37\x46\x81\xfa\x58\x61\x26\xdb\x84\x70\xba\x40\xa5\x9b\x23\x6d\x83\xe9\x0b\xe7\x66\x67\x19\x57\xc0\x5d\xa2\x38\x09\x14\x68\xb1\x83\x63\x33\x50\xb7\xd9\x39\x08\xcf\x4a\x13\xb9\x44\x8d\x31\x44\x82\xeb\x62\x50\xea\x24\xaf\xe8\xcf\xbd\xba\x98\xf7\x40\x39\xcc\x33\x8d\xca\xf3\x98\x1b\x63\x37\xe9\xf2\x34\x99\x1b\x87\x0e\x00\x3a\x53\xf6\x88\x70\x59\x50\x86\x65\xbf\x3c\x36\x62\x5a\x24\x2c\xa3\xc7\xb3\xea\xb2\x8b\x7f\x5f\x35\x07\xe8\x15\xd1\x40\x95\xd5\xdd\x98\x9f\x72\xfb\xee\x1b\xf3\x52\x7d\x03\x31\x95\x76\x30\xcf\x3a\xfd\xe1\xed\x76\xfb\x4a\xf9\xf5\x06\x06\xbb\x6d\xe6\x59\x7f\x70\xd6\x03\xd3\xe6\x3b\x3c\x51\xbd\xca\x4d\x13\xa5\x52\x22\xd7\xd0\xf6\x09\xac\xcf\x4a\xbe\xb4\xde\xe5\x93\xd1\x31\x5f\xae\xaa\xa7\x80\x36\x23\x7e\x9d\x91\x76\xf7\x12\xeb\x8c\x2f\x3f\x98\x74\x0d\x17\x95\xb6\xfb\x65\x9a\xfd\x00\xa0\xbc\x1f\x3b\x22\x61\x53\x7f\x6d\x7e\x64\x7b\x37\xc2\x14\xee\x48\x7b\xae\xc8\x07\x00\x4b\xe4\x28\x69\xf4\x2b\x5e\x6f\xe7\x12\xb8\x1b\xee\x7c\xf1\x35\xb3\xff\x0b\x32\xbb\x74\x8c\xdb\xff\x75\x13\xbb\x16\xa8\x5f\x6a\x88\x2f\x3a\xd3\xde\xd7\x55\x07\xdf\x4f\x6d\xc7\xe9\xd6\x57\x53\x55\x79\xb9\x96\x62\x43\xe3\xd2\xa3\x21\x04\xb5\x4b\x86\xfa\x9d\x57\x31\xcf\xab\x1a\xfd\x1a\xc6\xae\xd8\xdf\xff\xca\xeb\x88\xc0\xdc\xd6\xf9\xe0\x38\xdb\x3a\xa7\xf6\x1d\x40\xb7\x3e\x6a\x07\x70\xe2\xe7\x11\x96\x5d\xc0\x13\x82\xe0\x2c\xcb\x7f\xc8\x61\xc7\x76\xc1\xfd\xe5\xb4\xf7\xc1\x8e\x4c\x7a\xb3\x7c\xc9\xdd\xf7\x4a\x17\x14\x8d\x6f\x8a\x1e\xbf\x25\x86\x5e\x87\xe1\x36\xe1\x32\x08\x5e\xaa\xd9\xfe\xbe\xaf\x5e\xea\x05\x7b\x06\x4b\x6d\xd8\xdc\x0b\xa9\xd1\xc6\x6c\x2d\x69\x37\x29\x7c\xfa\x3c\x18\x0c\x1a\x85\xa5\x5a\x35\x42\x08\x12\x74\xbf\x04\xab\x66\x76\x30\xa8\xe7\x6d\xf9\x8b\xb3\x56\x81\x3c\x89\x46\x41\xeb\x77\x50\x50\xfd\x8e\x53\x1f\x0e\x2a\x0e\xa9\x39\xa3\xff\xdb\x48\xf0\x9f\x00\x00\x00\xff\xff\x94\x65\x0e\xfb\xd4\x27\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 10196, mode: os.FileMode(436), modTime: time.Unix(1653468590, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"..": &bintree{nil, map[string]*bintree{
					"..": &bintree{nil, map[string]*bintree{
						"..": &bintree{nil, map[string]*bintree{
							"..": &bintree{nil, map[string]*bintree{
								"resources": &bintree{nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": &bintree{ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
